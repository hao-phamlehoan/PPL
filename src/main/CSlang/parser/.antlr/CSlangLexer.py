# Generated from e:/231/PPL/Assignment/Assignment3/initial/src/main/CSlang/parser/CSlang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,64,465,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,0,1,1,4,1,144,8,
        1,11,1,12,1,145,1,2,5,2,149,8,2,10,2,12,2,152,9,2,1,2,1,2,5,2,156,
        8,2,10,2,12,2,159,9,2,1,3,1,3,1,3,3,3,164,8,3,1,3,3,3,167,8,3,1,
        4,1,4,3,4,171,8,4,1,5,1,5,5,5,175,8,5,10,5,12,5,178,9,5,1,6,1,6,
        3,6,182,8,6,1,6,4,6,185,8,6,11,6,12,6,186,1,7,1,7,3,7,191,8,7,1,
        8,1,8,5,8,195,8,8,10,8,12,8,198,9,8,1,8,1,8,1,8,1,9,1,9,3,9,205,
        8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,
        1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,
        1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
        1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
        1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,
        1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,
        1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,
        1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,
        1,58,1,59,1,59,4,59,391,8,59,11,59,12,59,392,1,60,1,60,5,60,397,
        8,60,10,60,12,60,400,9,60,1,61,1,61,1,61,1,61,5,61,406,8,61,10,61,
        12,61,409,9,61,1,61,1,61,1,62,1,62,1,62,1,62,5,62,417,8,62,10,62,
        12,62,420,9,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,3,63,430,
        8,63,1,64,1,64,1,64,3,64,435,8,64,1,65,4,65,438,8,65,11,65,12,65,
        439,1,65,1,65,1,66,1,66,5,66,446,8,66,10,66,12,66,449,9,66,1,66,
        1,66,1,67,1,67,5,67,455,8,67,10,67,12,67,458,9,67,1,67,1,67,1,67,
        1,68,1,68,1,68,1,418,0,69,1,1,3,2,5,3,7,4,9,0,11,0,13,0,15,5,17,
        6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,14,35,15,37,16,39,17,
        41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,26,59,27,61,28,
        63,29,65,30,67,31,69,32,71,33,73,34,75,35,77,36,79,37,81,38,83,39,
        85,40,87,41,89,42,91,43,93,44,95,45,97,46,99,47,101,48,103,49,105,
        50,107,51,109,52,111,53,113,54,115,55,117,56,119,57,121,58,123,59,
        125,60,127,0,129,0,131,61,133,62,135,63,137,64,1,0,11,1,0,48,48,
        1,0,49,57,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,48,57,
        65,90,95,95,97,122,3,0,65,90,95,95,97,122,2,0,10,10,13,13,4,0,10,
        10,13,13,34,34,92,92,7,0,34,34,92,92,98,98,102,102,110,110,114,114,
        116,116,3,0,8,10,12,13,32,32,480,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
        0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,
        111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,
        0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,131,1,0,0,0,0,133,
        1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,1,139,1,0,0,0,3,143,1,0,0,0,
        5,150,1,0,0,0,7,160,1,0,0,0,9,170,1,0,0,0,11,172,1,0,0,0,13,179,
        1,0,0,0,15,190,1,0,0,0,17,192,1,0,0,0,19,204,1,0,0,0,21,206,1,0,
        0,0,23,208,1,0,0,0,25,210,1,0,0,0,27,212,1,0,0,0,29,214,1,0,0,0,
        31,216,1,0,0,0,33,218,1,0,0,0,35,220,1,0,0,0,37,222,1,0,0,0,39,224,
        1,0,0,0,41,226,1,0,0,0,43,228,1,0,0,0,45,230,1,0,0,0,47,232,1,0,
        0,0,49,234,1,0,0,0,51,236,1,0,0,0,53,238,1,0,0,0,55,241,1,0,0,0,
        57,244,1,0,0,0,59,247,1,0,0,0,61,249,1,0,0,0,63,252,1,0,0,0,65,254,
        1,0,0,0,67,257,1,0,0,0,69,259,1,0,0,0,71,262,1,0,0,0,73,265,1,0,
        0,0,75,267,1,0,0,0,77,269,1,0,0,0,79,275,1,0,0,0,81,284,1,0,0,0,
        83,287,1,0,0,0,85,292,1,0,0,0,87,296,1,0,0,0,89,301,1,0,0,0,91,307,
        1,0,0,0,93,311,1,0,0,0,95,317,1,0,0,0,97,322,1,0,0,0,99,329,1,0,
        0,0,101,336,1,0,0,0,103,341,1,0,0,0,105,347,1,0,0,0,107,359,1,0,
        0,0,109,363,1,0,0,0,111,368,1,0,0,0,113,372,1,0,0,0,115,377,1,0,
        0,0,117,383,1,0,0,0,119,388,1,0,0,0,121,394,1,0,0,0,123,401,1,0,
        0,0,125,412,1,0,0,0,127,429,1,0,0,0,129,434,1,0,0,0,131,437,1,0,
        0,0,133,443,1,0,0,0,135,452,1,0,0,0,137,462,1,0,0,0,139,140,5,60,
        0,0,140,141,5,45,0,0,141,2,1,0,0,0,142,144,5,48,0,0,143,142,1,0,
        0,0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,4,1,0,0,
        0,147,149,7,0,0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,
        0,150,151,1,0,0,0,151,153,1,0,0,0,152,150,1,0,0,0,153,157,7,1,0,
        0,154,156,7,2,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,
        0,157,158,1,0,0,0,158,6,1,0,0,0,159,157,1,0,0,0,160,166,3,9,4,0,
        161,163,3,11,5,0,162,164,3,13,6,0,163,162,1,0,0,0,163,164,1,0,0,
        0,164,167,1,0,0,0,165,167,3,13,6,0,166,161,1,0,0,0,166,165,1,0,0,
        0,167,8,1,0,0,0,168,171,3,3,1,0,169,171,3,5,2,0,170,168,1,0,0,0,
        170,169,1,0,0,0,171,10,1,0,0,0,172,176,5,46,0,0,173,175,7,2,0,0,
        174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,
        177,12,1,0,0,0,178,176,1,0,0,0,179,181,7,3,0,0,180,182,7,4,0,0,181,
        180,1,0,0,0,181,182,1,0,0,0,182,184,1,0,0,0,183,185,7,2,0,0,184,
        183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,
        14,1,0,0,0,188,191,3,87,43,0,189,191,3,89,44,0,190,188,1,0,0,0,190,
        189,1,0,0,0,191,16,1,0,0,0,192,196,5,34,0,0,193,195,3,127,63,0,194,
        193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,
        199,1,0,0,0,198,196,1,0,0,0,199,200,5,34,0,0,200,201,6,8,0,0,201,
        18,1,0,0,0,202,205,3,115,57,0,203,205,3,107,53,0,204,202,1,0,0,0,
        204,203,1,0,0,0,205,20,1,0,0,0,206,207,5,40,0,0,207,22,1,0,0,0,208,
        209,5,41,0,0,209,24,1,0,0,0,210,211,5,123,0,0,211,26,1,0,0,0,212,
        213,5,125,0,0,213,28,1,0,0,0,214,215,5,91,0,0,215,30,1,0,0,0,216,
        217,5,93,0,0,217,32,1,0,0,0,218,219,5,46,0,0,219,34,1,0,0,0,220,
        221,5,44,0,0,221,36,1,0,0,0,222,223,5,59,0,0,223,38,1,0,0,0,224,
        225,5,58,0,0,225,40,1,0,0,0,226,227,5,43,0,0,227,42,1,0,0,0,228,
        229,5,45,0,0,229,44,1,0,0,0,230,231,5,42,0,0,231,46,1,0,0,0,232,
        233,5,47,0,0,233,48,1,0,0,0,234,235,5,92,0,0,235,50,1,0,0,0,236,
        237,5,33,0,0,237,52,1,0,0,0,238,239,5,38,0,0,239,240,5,38,0,0,240,
        54,1,0,0,0,241,242,5,124,0,0,242,243,5,124,0,0,243,56,1,0,0,0,244,
        245,5,61,0,0,245,246,5,61,0,0,246,58,1,0,0,0,247,248,5,61,0,0,248,
        60,1,0,0,0,249,250,5,33,0,0,250,251,5,61,0,0,251,62,1,0,0,0,252,
        253,5,60,0,0,253,64,1,0,0,0,254,255,5,60,0,0,255,256,5,61,0,0,256,
        66,1,0,0,0,257,258,5,62,0,0,258,68,1,0,0,0,259,260,5,62,0,0,260,
        261,5,61,0,0,261,70,1,0,0,0,262,263,5,58,0,0,263,264,5,61,0,0,264,
        72,1,0,0,0,265,266,5,94,0,0,266,74,1,0,0,0,267,268,5,37,0,0,268,
        76,1,0,0,0,269,270,5,98,0,0,270,271,5,114,0,0,271,272,5,101,0,0,
        272,273,5,97,0,0,273,274,5,107,0,0,274,78,1,0,0,0,275,276,5,99,0,
        0,276,277,5,111,0,0,277,278,5,110,0,0,278,279,5,116,0,0,279,280,
        5,105,0,0,280,281,5,110,0,0,281,282,5,117,0,0,282,283,5,101,0,0,
        283,80,1,0,0,0,284,285,5,105,0,0,285,286,5,102,0,0,286,82,1,0,0,
        0,287,288,5,101,0,0,288,289,5,108,0,0,289,290,5,115,0,0,290,291,
        5,101,0,0,291,84,1,0,0,0,292,293,5,102,0,0,293,294,5,111,0,0,294,
        295,5,114,0,0,295,86,1,0,0,0,296,297,5,116,0,0,297,298,5,114,0,0,
        298,299,5,117,0,0,299,300,5,101,0,0,300,88,1,0,0,0,301,302,5,102,
        0,0,302,303,5,97,0,0,303,304,5,108,0,0,304,305,5,115,0,0,305,306,
        5,101,0,0,306,90,1,0,0,0,307,308,5,105,0,0,308,309,5,110,0,0,309,
        310,5,116,0,0,310,92,1,0,0,0,311,312,5,102,0,0,312,313,5,108,0,0,
        313,314,5,111,0,0,314,315,5,97,0,0,315,316,5,116,0,0,316,94,1,0,
        0,0,317,318,5,98,0,0,318,319,5,111,0,0,319,320,5,111,0,0,320,321,
        5,108,0,0,321,96,1,0,0,0,322,323,5,115,0,0,323,324,5,116,0,0,324,
        325,5,114,0,0,325,326,5,105,0,0,326,327,5,110,0,0,327,328,5,103,
        0,0,328,98,1,0,0,0,329,330,5,114,0,0,330,331,5,101,0,0,331,332,5,
        116,0,0,332,333,5,117,0,0,333,334,5,114,0,0,334,335,5,110,0,0,335,
        100,1,0,0,0,336,337,5,110,0,0,337,338,5,117,0,0,338,339,5,108,0,
        0,339,340,5,108,0,0,340,102,1,0,0,0,341,342,5,99,0,0,342,343,5,108,
        0,0,343,344,5,97,0,0,344,345,5,115,0,0,345,346,5,115,0,0,346,104,
        1,0,0,0,347,348,5,99,0,0,348,349,5,111,0,0,349,350,5,110,0,0,350,
        351,5,115,0,0,351,352,5,116,0,0,352,353,5,114,0,0,353,354,5,117,
        0,0,354,355,5,99,0,0,355,356,5,116,0,0,356,357,5,111,0,0,357,358,
        5,114,0,0,358,106,1,0,0,0,359,360,5,118,0,0,360,361,5,97,0,0,361,
        362,5,114,0,0,362,108,1,0,0,0,363,364,5,115,0,0,364,365,5,101,0,
        0,365,366,5,108,0,0,366,367,5,102,0,0,367,110,1,0,0,0,368,369,5,
        110,0,0,369,370,5,101,0,0,370,371,5,119,0,0,371,112,1,0,0,0,372,
        373,5,118,0,0,373,374,5,111,0,0,374,375,5,105,0,0,375,376,5,100,
        0,0,376,114,1,0,0,0,377,378,5,99,0,0,378,379,5,111,0,0,379,380,5,
        110,0,0,380,381,5,115,0,0,381,382,5,116,0,0,382,116,1,0,0,0,383,
        384,5,102,0,0,384,385,5,117,0,0,385,386,5,110,0,0,386,387,5,99,0,
        0,387,118,1,0,0,0,388,390,5,64,0,0,389,391,7,5,0,0,390,389,1,0,0,
        0,391,392,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,120,1,0,0,
        0,394,398,7,6,0,0,395,397,7,5,0,0,396,395,1,0,0,0,397,400,1,0,0,
        0,398,396,1,0,0,0,398,399,1,0,0,0,399,122,1,0,0,0,400,398,1,0,0,
        0,401,402,5,47,0,0,402,403,5,47,0,0,403,407,1,0,0,0,404,406,8,7,
        0,0,405,404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,
        0,0,408,410,1,0,0,0,409,407,1,0,0,0,410,411,6,61,1,0,411,124,1,0,
        0,0,412,413,5,47,0,0,413,414,5,42,0,0,414,418,1,0,0,0,415,417,9,
        0,0,0,416,415,1,0,0,0,417,420,1,0,0,0,418,419,1,0,0,0,418,416,1,
        0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,422,5,42,0,0,422,423,5,
        47,0,0,423,424,1,0,0,0,424,425,6,62,1,0,425,126,1,0,0,0,426,430,
        8,8,0,0,427,428,5,92,0,0,428,430,7,9,0,0,429,426,1,0,0,0,429,427,
        1,0,0,0,430,128,1,0,0,0,431,432,5,92,0,0,432,435,8,9,0,0,433,435,
        5,92,0,0,434,431,1,0,0,0,434,433,1,0,0,0,435,130,1,0,0,0,436,438,
        7,10,0,0,437,436,1,0,0,0,438,439,1,0,0,0,439,437,1,0,0,0,439,440,
        1,0,0,0,440,441,1,0,0,0,441,442,6,65,1,0,442,132,1,0,0,0,443,447,
        5,34,0,0,444,446,3,127,63,0,445,444,1,0,0,0,446,449,1,0,0,0,447,
        445,1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,447,1,0,0,0,450,
        451,6,66,2,0,451,134,1,0,0,0,452,456,5,34,0,0,453,455,3,127,63,0,
        454,453,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,
        457,459,1,0,0,0,458,456,1,0,0,0,459,460,3,129,64,0,460,461,6,67,
        3,0,461,136,1,0,0,0,462,463,9,0,0,0,463,464,6,68,4,0,464,138,1,0,
        0,0,22,0,145,150,157,163,166,170,176,181,186,190,196,204,392,398,
        407,418,429,434,439,447,456,5,1,8,0,6,0,0,1,66,1,1,67,2,1,68,3
    ]

class CSlangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    ZERO = 2
    DIGIT = 3
    FLOATLIT = 4
    BOOLIT = 5
    STRINGLIT = 6
    CONST_VAR = 7
    LP = 8
    RP = 9
    LCURB = 10
    RCURB = 11
    LSQAB = 12
    RSQAB = 13
    DOT = 14
    COMMA = 15
    SEMI = 16
    COLON = 17
    ADD = 18
    SUBTRAC = 19
    MULTI = 20
    DIVID = 21
    BSLASH = 22
    NOT = 23
    AND = 24
    OR = 25
    ISEQUAL = 26
    EQUAL = 27
    NOTEQUAL = 28
    LESSTHAN = 29
    LESSTHANOREQ = 30
    GREATERTHAN = 31
    GREATERTHANOREQ = 32
    ASSIGN = 33
    STRINGCON = 34
    MODUL = 35
    BREAK = 36
    CONTINUE = 37
    IF = 38
    ELSE = 39
    FOR = 40
    TRUE = 41
    FALSE = 42
    INT = 43
    FLOAT = 44
    BOOL = 45
    STRING = 46
    RETURN = 47
    NULL = 48
    CLASS = 49
    CONSTRUCTOR = 50
    VAR = 51
    SELF = 52
    NEW = 53
    VOID = 54
    CONST = 55
    FUNC = 56
    A_ID = 57
    ID = 58
    CMSINGLE = 59
    CMMULTI = 60
    WS = 61
    UNCLOSE_STRING = 62
    ILLEGAL_ESCAPE = 63
    ERROR_CHAR = 64

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'<-'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", "','", 
            "';'", "':'", "'+'", "'-'", "'*'", "'/'", "'\\'", "'!'", "'&&'", 
            "'||'", "'=='", "'='", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "':='", "'^'", "'%'", "'break'", "'continue'", "'if'", "'else'", 
            "'for'", "'true'", "'false'", "'int'", "'float'", "'bool'", 
            "'string'", "'return'", "'null'", "'class'", "'constructor'", 
            "'var'", "'self'", "'new'", "'void'", "'const'", "'func'" ]

    symbolicNames = [ "<INVALID>",
            "ZERO", "DIGIT", "FLOATLIT", "BOOLIT", "STRINGLIT", "CONST_VAR", 
            "LP", "RP", "LCURB", "RCURB", "LSQAB", "RSQAB", "DOT", "COMMA", 
            "SEMI", "COLON", "ADD", "SUBTRAC", "MULTI", "DIVID", "BSLASH", 
            "NOT", "AND", "OR", "ISEQUAL", "EQUAL", "NOTEQUAL", "LESSTHAN", 
            "LESSTHANOREQ", "GREATERTHAN", "GREATERTHANOREQ", "ASSIGN", 
            "STRINGCON", "MODUL", "BREAK", "CONTINUE", "IF", "ELSE", "FOR", 
            "TRUE", "FALSE", "INT", "FLOAT", "BOOL", "STRING", "RETURN", 
            "NULL", "CLASS", "CONSTRUCTOR", "VAR", "SELF", "NEW", "VOID", 
            "CONST", "FUNC", "A_ID", "ID", "CMSINGLE", "CMMULTI", "WS", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "ZERO", "DIGIT", "FLOATLIT", "INTPART", "DECPART", 
                  "EXPPART", "BOOLIT", "STRINGLIT", "CONST_VAR", "LP", "RP", 
                  "LCURB", "RCURB", "LSQAB", "RSQAB", "DOT", "COMMA", "SEMI", 
                  "COLON", "ADD", "SUBTRAC", "MULTI", "DIVID", "BSLASH", 
                  "NOT", "AND", "OR", "ISEQUAL", "EQUAL", "NOTEQUAL", "LESSTHAN", 
                  "LESSTHANOREQ", "GREATERTHAN", "GREATERTHANOREQ", "ASSIGN", 
                  "STRINGCON", "MODUL", "BREAK", "CONTINUE", "IF", "ELSE", 
                  "FOR", "TRUE", "FALSE", "INT", "FLOAT", "BOOL", "STRING", 
                  "RETURN", "NULL", "CLASS", "CONSTRUCTOR", "VAR", "SELF", 
                  "NEW", "VOID", "CONST", "FUNC", "A_ID", "ID", "CMSINGLE", 
                  "CMMULTI", "CHARINSTR", "ESC_PART", "WS", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "CSlang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[8] = self.STRINGLIT_action 
            actions[66] = self.UNCLOSE_STRING_action 
            actions[67] = self.ILLEGAL_ESCAPE_action 
            actions[68] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise UncloseString(self.text[1:])
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise IllegalEscape(self.text[1:])
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


